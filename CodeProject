!**************************************************************************!
! Project
! Authors: Pedro MagalhÃ£es 
! Units: IS
! Last review: 22/01/2024
! Status: OK
!**************************************************************************!
!--------------------------------------------------------------------------!
!****_                    0. QUESTIONS				      _****!
!	I) In Single Shunt, when i apply CPMERGE, the code give me a	   !
!	   wrong result							   !
!--------------------------------------------------------------------------!
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                    1. ANSYS STARTUP			      _****!
!			  Status: OK                                       !
!--------------------------------------------------------------------------!
!****_ 1.1 Clear model [OK]
FINISH										! Finalize open processes
/CLEAR,NOSTART  								! clear model
KEYW,PR_STRUC,1 								! Structural Analysis
KEYW,PR_ELMAG,1 								! Electromagnetic Analysis
KEYW,MAGELC,1   								! Magnetic-Electro Analysis
KEYW,PR_MULTI,1 								! Multi Analysis
!***_
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                    2. INPUT PARAMETERS                         _****!
!			  Status: OK		  		           !
!--------------------------------------------------------------------------!
!****_ 2.0 Quantities of patches [OK]
PATCHES_X		= 2							! Quantity in x
PATCHES_Y		= 2							! Quantity in y
QNTD_PATCHES		= PATCHES_X*PATCHES_Y					! 1 - 1 patch | 4 - 4 patches
!***_
!****_ 2.1 Geometric parameters [OK]
!	Plate Dimension
LPL		= 0.414								! [m] Length
WPL		= 0.314								! [m] Width
TPL		= 0.001								! [m] Thickness
!
!	Patch Dimension
LPA		= 0.0414							! [m] Length 
WPA		= 0.0314							! [m] Width
TPA		= 0.0005							! [m] Thickness
!
!***_
!****_ 2.2 Eletrical parameters [OK]
! Type of Shunt
SHUNT_TYPE		= 0							! 0 - Multiple, 1 - Single
										! The Single Shunt just is calculated if 
										! SOLUTION_TYPE = 2

*IF,SHUNT_TYPE,EQ,0,THEN							! Multiple
	QNT_CIRCUITS	= QNTD_PATCHES
*ELSE										! Single
	QNT_CIRCUITS	= 1
*ENDIF
! Open Input_EletricValues.txt
! The values in the .txt must have 4 decimal places
*DIM,ELETRIC_PARAMETERS,ARRAY,3*QNT_CIRCUITS,1, , , ,
*DIM,RESISTANCES,ARRAY,QNT_CIRCUITS,1, , , ,
*DIM,INDUCTANCES,ARRAY,QNT_CIRCUITS,1, , , ,
*DIM,CIRCUITS,ARRAY,QNT_CIRCUITS,1, , , ,

*VREAD,ELETRIC_PARAMETERS,'Input_EletricValues','txt',' ',IJK,3*QNT_CIRCUITS,1,1,,
(1F12.4)
!
! Resistence values
*DO, I, 1, QNT_CIRCUITS
	RESISTANCES(I,1)	= ELETRIC_PARAMETERS(I,1)
*ENDDO
! Inductance values
*DO, I, 1, QNT_CIRCUITS
	INDUCTANCES(I,1)	= ELETRIC_PARAMETERS(QNT_CIRCUITS + I,1)
*ENDDO
! Circuit types				
! 1 - Short-Circuit	
! 2 - Open-Circuit [without eletrical components]
! 3 - Circuit [with resistence]
! 4 - Circuit in serie [with resistence and inductance]
! 5 - Circuit in parallel [with resistence and inductance]
*DO, I, 1, QNT_CIRCUITS	
	CIRCUITS(I,1)		= ELETRIC_PARAMETERS(2*QNT_CIRCUITS + I,1)
*ENDDO
!***_
!****_ 2.3 Material parameters [OK]
!	Aluminum [Plate]
E1		= 70e9								! [N/m2] Modulus of elasticity
NU1		= 0.33								! [adm] Poisson coefficient
RHO1		= 2700								! [kg/m3] Density
!
!	Piezoelectric [patches]
!	Anisotropic elastic
SE11 		= 16.5e-12 							! [m2/N]
SE12 		= -4.78e-12 							! [m2/N]
SE13 		= -8.45e-12 							! [m2/N]
SE14 		= 0	 							! [m2/N]
SE15 		= 0	 							! [m2/N]
SE16 		= 0	 							! [m2/N]
SE22 		= 16.5e-12 							! [m2/N]
SE23 		= -8.45e-12 							! [m2/N]
SE24 		= 0	 							! [m2/N]
SE25 		= 0	 							! [m2/N]
SE26 		= 0	 							! [m2/N]
SE33 		= 20.7e-12 							! [m2/N]
SE34 		= 0	 							! [m2/N]
SE35 		= 0	 							! [m2/N]
SE36 		= 0	 							! [m2/N]
SE44 		= 42.6e-12 							! [m2/N]
SE45 		= 0	 							! [m2/N]
SE46 		= 0	 							! [m2/N]
SE55 		= 43.5e-12 							! [m2/N]
SE56 		= 0	 							! [m2/N]
SE66 		= 43.5e-12 							! [m2/N]
! 	Piezoelectric - strain form
D13 		= -274e-12 							! [C/N]
D23 		= -274e-12 							! [C/N]
D33 		= 593e-12 							! [C/N]
D24 		= 741e-12 							! [C/N]
D15 		= 741e-12 							! [C/N]
! 	Relative permittivity
EP11 		= 3130
EP22 		= 3130
EP33 		= 3400
EP12		= 0
EP23		= 0
EP13		= 0
!
RHO2 		= 7500 								! [kg/m3] Density
!***_
!****_ 2.4 Patch positions - Center of each patch [OK]
! Matrix patches coordinates
! !!!!  Remember: it must to be in the Matrix Form  !!!!
! Form how to define:
!
!       Column 2  Column 1
!	    |       |
!	 _______________
!	|	        |
!	|  |2|     |1|  |  --> Row 1
!	|       y       |
!	|       |_x     |
!	|	        |
!	|  |4|     |3|  |  --> Row 2
! 	|_______________|
!
! Input values are read in file 'InputGeometricParameters.txt' in the following order: 
! Position of each column in x		-- 1 -> 2 [in this sequence]
! Position of each row in y		-- 1 -> 3 [in this sequence]
! Mesh parameters
*DIM,GEOMETRIC_PARAMETERS,ARRAY,PATCHES_X+PATCHES_Y,1, , , ,
*DIM,POSITIONS_PATCHES,ARRAY,QNTD_PATCHES,2, , , ,  

*VREAD,GEOMETRIC_PARAMETERS,'Input_GeometricParameters','txt',' ',IJK,PATCHES_X+PATCHES_Y,1,1,,
(1F10.6)

*DO,I,1,PATCHES_X
	*DO,J,1,PATCHES_Y
		POSITIONS_PATCHES(I+(J-1)*PATCHES_X,1) = GEOMETRIC_PARAMETERS(I,1)
	*ENDDO
*ENDDO
*DO,I,1,PATCHES_Y
	*DO,J,1,PATCHES_X
		POSITIONS_PATCHES(J + (I-1)*PATCHES_X,2) = GEOMETRIC_PARAMETERS(I+PATCHES_X,1)
	*ENDDO
*ENDDO
!***_
!****_ 2.5 Mesh parameters [OK]

TDIV			= 1							! Number of elements in thickness
MESH_SCALE		= 4							! If do you want to increase the quantity of elements			
MESH_TYPE		= 1							! 0 - Have to adjust the values of scale
										! 1 - Have to put the number of divisions that you want [in patch], and the code compute
										!     the scale values
								
*IF,MESH_TYPE,EQ,0,THEN								! Mesh with the quantities of elements
	BETWDIV			= 5*MESH_SCALE					! Can change this number
	PATCHDIV		= 3*MESH_SCALE					! Can change this number
	CORNERDIV		= 4*MESH_SCALE					! Can change this number
	LENGTH_MESH		= LPA/PATCHDIV
*ELSEIF,MESH_TYPE,EQ,1,THEN							! Mesh with the length of the element
	NUMBER_DIVISION		= 8						! Can change this number
	PATCHDIV		= NUMBER_DIVISION	
	LENGTH_MESH		= LPA/PATCHDIV					! The element length is related to LPA value
*ENDIF
!***_
!****_ 2.6 Boundary parameters [OK]
! Load
LOC_F_X			= 0							! [m] Position x where the force is applied
LOC_F_Y			= 0							! [m] Position y where the force is applied
F_VALUE			= -100							! [N] Force value [also put the orientation +/-]
!***_
!****_ 2.7 Analyses parameters [OK]
SOLUTION_TYPE		= 0							! Choose the analyse that you want to do
										! 0 - Modal, 1 - Harmonic, 2 - Both
! Modal analyse
QNTD_MODES		= 9							! Quantities of modes

! Harmonic analyse
FREQ_MODE_EXCITED	= 38							! [Hz] Write the frequency of the mode you want to excit
MODE_EXCITED		= 1							! The mode of the frequency above

!***_
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                    3. PRE PROCESSING                           _****!
!			   Status: OK				           !
!--------------------------------------------------------------------------! 
/PREP7
!****_ 3.1 Add materials to the list [OK]
!	Aluminum [Plate]
MP,EX,1,E1	 								! Young Modulus
MP,PRXY,1,NU1     								! Poisson coefficient
MP,DENS,1,RHO1									! Density
!	Piezoelectric [patches]
MP,DENS,2,RHO2									! Density
TB,DPER,2,,,1									! Relative permittivity
TBDATA,1,EP11,EP22,EP33,EP12,EP23,EP13
TB,ANEL,2,,,1 									! Anisotropic elastic
TBDATA,1,SE11,SE12,SE13
TBDATA,4,SE14,SE15,SE16
TBDATA,7,SE22,SE23,SE24
TBDATA,10,SE25,SE26,SE33
TBDATA,13,SE34,SE35,SE36
TBDATA,16,SE44,SE45,SE46
TBDATA,19,SE55,SE56,SE66
TB,PIEZ,2,,,1 									! Piezoelectric - strain form
TBDATA,3,d13
TBDATA,6,d23
TBDATA,9,d33
TBDATA,14,d24
TBDATA,16,d15
!***_
!****_ 3.2 Define element type [OK]
ET,1,SOLID186									! Plate

ET,2,SOLID226,1001								! Piezoelectric patches

ET,3,CIRCU94,0									! Resistances
*DO,I,1,QNT_CIRCUITS
	R,I,RESISTANCES(I,1), , , , , 
*ENDDO

ET,4,CIRCU94,1									! Inductances
*DO,I,1,QNT_CIRCUITS
	R,I+QNT_CIRCUITS,INDUCTANCES(I,1), , , , , 
*ENDDO

!***_
!****_ 3.3 Create geometric model [OK]
!
!****_ 3.3.1 KeyPoints [OK]
		! Plate
K,1,LPL/2,WPL/2,-TPL/2
K,2,-LPL/2,WPL/2,-TPL/2
K,3,-LPL/2,-WPL/2,-TPL/2
K,4,LPL/2,-WPL/2,-TPL/2
		! Patches
NUMBER_KEYPOINT		= 4
*DO,I,1,QNTD_PATCHES
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	K,NUMBER_KEYPOINT,POSITIONS_PATCHES(I,1)+LPA/2,POSITIONS_PATCHES(I,2)+WPA/2,-TPL/2
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	K,NUMBER_KEYPOINT,POSITIONS_PATCHES(I,1)-LPA/2,POSITIONS_PATCHES(I,2)+WPA/2,-TPL/2
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	K,NUMBER_KEYPOINT,POSITIONS_PATCHES(I,1)-LPA/2,POSITIONS_PATCHES(I,2)-WPA/2,-TPL/2
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	K,NUMBER_KEYPOINT,POSITIONS_PATCHES(I,1)+LPA/2,POSITIONS_PATCHES(I,2)-WPA/2,-TPL/2
*ENDDO

		! Intermediary keypoints	
*DO,I,1,PATCHES_X
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	K,NUMBER_KEYPOINT,POSITIONS_PATCHES(I,1)+LPA/2,WPL/2,-TPL/2
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	K,NUMBER_KEYPOINT,POSITIONS_PATCHES(I,1)-LPA/2,WPL/2,-TPL/2
*ENDDO

*DO,I,1,PATCHES_Y
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	K,NUMBER_KEYPOINT,-LPL/2,POSITIONS_PATCHES(I*PATCHES_X,2)+WPA/2,-TPL/2
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	K,NUMBER_KEYPOINT,-LPL/2,POSITIONS_PATCHES(I*PATCHES_X,2)-WPA/2,-TPL/2
*ENDDO

*DO,I,1,PATCHES_X
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	K,NUMBER_KEYPOINT,POSITIONS_PATCHES(QNTD_PATCHES-(I-1),1)-LPA/2,-WPL/2,-TPL/2
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	K,NUMBER_KEYPOINT,POSITIONS_PATCHES(QNTD_PATCHES-(I-1),1)+LPA/2,-WPL/2,-TPL/2
*ENDDO

*DO,I,1,PATCHES_Y
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	K,NUMBER_KEYPOINT,LPL/2,POSITIONS_PATCHES(PATCHES_X*(PATCHES_Y-1)+1-PATCHES_X*(I-1),2)-WPA/2,-TPL/2
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	K,NUMBER_KEYPOINT,LPL/2,POSITIONS_PATCHES(PATCHES_X*(PATCHES_Y-1)+1-PATCHES_X*(I-1),2)+WPA/2,-TPL/2
*ENDDO

 		! Auxiliar KeyPoints [top patches]
LAST_KEYPOINT = NUMBER_KEYPOINT
*DO,I,1,QNTD_PATCHES
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	K,NUMBER_KEYPOINT,POSITIONS_PATCHES(I,1)+LPA/2,POSITIONS_PATCHES(I,2)+WPA/2,TPL/2
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	K,NUMBER_KEYPOINT,POSITIONS_PATCHES(I,1)-LPA/2,POSITIONS_PATCHES(I,2)+WPA/2,TPL/2
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	K,NUMBER_KEYPOINT,POSITIONS_PATCHES(I,1)-LPA/2,POSITIONS_PATCHES(I,2)-WPA/2,TPL/2
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	K,NUMBER_KEYPOINT,POSITIONS_PATCHES(I,1)+LPA/2,POSITIONS_PATCHES(I,2)-WPA/2,TPL/2
*ENDDO
!***_
!****_ 3.3.2 Lines [OK]
		! Plate
		! Botton Patches
NUMBER_KEYPOINT		= 4
*DO,I,1,QNTD_PATCHES
	NUMBER_KEYPOINT = NUMBER_KEYPOINT + 1
	L,NUMBER_KEYPOINT,NUMBER_KEYPOINT+1
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	L,NUMBER_KEYPOINT,NUMBER_KEYPOINT+1
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	L,NUMBER_KEYPOINT,NUMBER_KEYPOINT+1
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	L,NUMBER_KEYPOINT,NUMBER_KEYPOINT-3
*ENDDO
		! Top Patches
NUMBER_KEYPOINT		= LAST_KEYPOINT
*DO,I,1,QNTD_PATCHES
	NUMBER_KEYPOINT = NUMBER_KEYPOINT + 1
	L,NUMBER_KEYPOINT,NUMBER_KEYPOINT+1
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	L,NUMBER_KEYPOINT,NUMBER_KEYPOINT+1
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	L,NUMBER_KEYPOINT,NUMBER_KEYPOINT+1
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
	L,NUMBER_KEYPOINT,NUMBER_KEYPOINT-3
*ENDDO

		! Wall of the plate
NUMBER_KEYPOINT		= 4+4*QNTD_PATCHES
NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 1
*DO,I,1,2*(PATCHES_X+PATCHES_Y)
	*IF,I,EQ,1,THEN					! First Corner
		L,1,NUMBER_KEYPOINT
	*ENDIF
	
	*IF,I,EQ,PATCHES_X,THEN
		L,NUMBER_KEYPOINT,NUMBER_KEYPOINT+1
	*ELSEIF,I,EQ,PATCHES_X+PATCHES_Y,THEN
		L,NUMBER_KEYPOINT,NUMBER_KEYPOINT+1
	*ELSEIF,I,EQ,2*PATCHES_X+PATCHES_Y,THEN
		L,NUMBER_KEYPOINT,NUMBER_KEYPOINT+1
	*ELSEIF,I,EQ,2*(PATCHES_X+PATCHES_Y),THEN
		L,NUMBER_KEYPOINT,NUMBER_KEYPOINT+1
	*ELSE
		L,NUMBER_KEYPOINT,NUMBER_KEYPOINT+1
		L,NUMBER_KEYPOINT+1,NUMBER_KEYPOINT+2
	*ENDIF
	
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 2
	*IF,I,EQ,PATCHES_X,THEN				! Second Corner
		L,2,NUMBER_KEYPOINT-1	
		L,2,NUMBER_KEYPOINT
	*ENDIF
	*IF,I,EQ,(PATCHES_X+PATCHES_Y),THEN		! Third Corner
		L,3,NUMBER_KEYPOINT-1	
		L,3,NUMBER_KEYPOINT
	*ENDIF
	*IF,I,EQ,(2*PATCHES_X+PATCHES_Y),THEN		! Fourth Corner
		L,4,NUMBER_KEYPOINT-1	
		L,4,NUMBER_KEYPOINT
	*ENDIF
	*IF,I,EQ,2*(PATCHES_X+PATCHES_Y),THEN		! First Corner
		L,1,NUMBER_KEYPOINT-1
	*ENDIF
*ENDDO
		! In x
NUMBER_KEYPOINT		= 1
*DO,J,1,PATCHES_Y
	NUMBER_KEYPOINT = NUMBER_KEYPOINT + 4
	L,NUMBER_KEYPOINT,LAST_KEYPOINT-(2*J-2)
	L,NUMBER_KEYPOINT+3,LAST_KEYPOINT-(2*J-1)
*IF,PATCHES_X,GT,1,THEN
*DO,I,1,PATCHES_X-1
	L,NUMBER_KEYPOINT+1,NUMBER_KEYPOINT + 4
	L,NUMBER_KEYPOINT+2,NUMBER_KEYPOINT + 7
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 4
*ENDDO
*ENDIF
	L,NUMBER_KEYPOINT+1,LAST_KEYPOINT-4*PATCHES_Y-2*PATCHES_X+1+(2*J-2)
	L,NUMBER_KEYPOINT+2,LAST_KEYPOINT-4*PATCHES_Y-2*PATCHES_X+1+(2*J-1)
*ENDDO

		! In y
*DO,I,1,PATCHES_X
	NUMBER_KEYPOINT		= 4
	NUMBER_KEYPOINT = NUMBER_KEYPOINT + 4*I
	L,NUMBER_KEYPOINT-3,LAST_KEYPOINT-4*PATCHES_Y-4*PATCHES_X+1+(2*I-2)
	L,NUMBER_KEYPOINT-2,LAST_KEYPOINT-4*PATCHES_Y-4*PATCHES_X+1+(2*I-1)
*IF,PATCHES_Y,GT,1,THEN
*DO,J,1,PATCHES_Y-1
	L,NUMBER_KEYPOINT,NUMBER_KEYPOINT+4*(PATCHES_X)-3
	L,NUMBER_KEYPOINT-1,NUMBER_KEYPOINT+4*(PATCHES_X)-2
	NUMBER_KEYPOINT	= NUMBER_KEYPOINT + 4*(PATCHES_X)
*ENDDO
*ENDIF
	L,NUMBER_KEYPOINT,LAST_KEYPOINT-2*PATCHES_Y-(2*I-2)
	L,NUMBER_KEYPOINT-1,LAST_KEYPOINT-2*PATCHES_Y-(2*I-1)
*ENDDO

!***_
!****_ 3.3.3 Areas [OK]
		! Patches
*DO,I,1,2*QNTD_PATCHES
	ALLSEL,ALL
	LSEL,S,LINE,,4*I-3,4*I
	AL,ALL,,
*ENDDO
		! Plate
! Corner Areas
ALLSEL,ALL
LSEL,S,LOC,Y,POSITIONS_PATCHES(1,2)+WPA/2,WPL/2
LSEL,R,LOC,X,POSITIONS_PATCHES(1,1)+LPA/2,LPL/2
LSEL,R,LOC,Z,-TPL/2,-TPL/2
AL,ALL,,
ALLSEL,ALL
LSEL,S,LOC,Y,POSITIONS_PATCHES(PATCHES_X,2)+WPA/2,WPL/2
LSEL,R,LOC,X,POSITIONS_PATCHES(PATCHES_X,1)-LPA/2,-LPL/2
LSEL,R,LOC,Z,-TPL/2,-TPL/2
AL,ALL,,
ALLSEL,ALL
LSEL,S,LOC,Y,POSITIONS_PATCHES(QNTD_PATCHES-(PATCHES_X-1),2)-WPA/2,-WPL/2
LSEL,R,LOC,X,POSITIONS_PATCHES(QNTD_PATCHES-(PATCHES_X-1),1)+LPA/2,LPL/2
LSEL,R,LOC,Z,-TPL/2,-TPL/2
AL,ALL,,
ALLSEL,ALL
LSEL,S,LOC,Y,POSITIONS_PATCHES(QNTD_PATCHES,2)-WPA/2,-WPL/2
LSEL,R,LOC,X,POSITIONS_PATCHES(QNTD_PATCHES,1)-LPA/2,-LPL/2
LSEL,R,LOC,Z,-TPL/2,-TPL/2
AL,ALL,,

! Areas between patches
*IF,PATCHES_X,GT,1,THEN
	*DO,I,1,PATCHES_Y
		*IF,PATCHES_X,GT,1,THEN
		*DO,J,1,PATCHES_X-1
			ALLSEL,ALL
			LSEL,S,LOC,Y,POSITIONS_PATCHES(I*PATCHES_X-PATCHES_X+J,2)+WPA/2,POSITIONS_PATCHES(I*PATCHES_X-PATCHES_X+J+1,2)-WPA/2
			LSEL,R,LOC,X,POSITIONS_PATCHES(I*PATCHES_X-PATCHES_X+J,1)-LPA/2,POSITIONS_PATCHES(I*PATCHES_X-PATCHES_X+J+1,1)+LPA/2
			LSEL,R,LOC,Z,-TPL/2,-TPL/2
			AL,ALL,,
			
			
			*IF,I,EQ,PATCHES_Y,THEN
				ALLSEL,ALL
				LSEL,S,LOC,Y,POSITIONS_PATCHES(I*PATCHES_X-PATCHES_X+J,2)-WPA/2,-WPL/2
				LSEL,R,LOC,X,POSITIONS_PATCHES(I*PATCHES_X-PATCHES_X+J,1)-LPA/2,POSITIONS_PATCHES(I*PATCHES_X-PATCHES_X+J+1,1)+LPA/2
				LSEL,R,LOC,Z,-TPL/2,-TPL/2
				AL,ALL,,
			*ENDIF
			*IF,I,EQ,1,THEN
				ALLSEL,ALL
				LSEL,S,LOC,Y,POSITIONS_PATCHES(I*PATCHES_X-PATCHES_X+J,2)+WPA/2,WPL/2
				LSEL,R,LOC,X,POSITIONS_PATCHES(I*PATCHES_X-PATCHES_X+J,1)-LPA/2,POSITIONS_PATCHES(I*PATCHES_X-PATCHES_X+J+1,1)+LPA/2
				LSEL,R,LOC,Z,-TPL/2,-TPL/2
				AL,ALL,,	
			*ENDIF
			*IF,I,NE,PATCHES_Y,THEN
				ALLSEL,ALL
				LSEL,S,LOC,Y,POSITIONS_PATCHES(I*PATCHES_X-PATCHES_X+J,2)-WPA/2,POSITIONS_PATCHES(I*PATCHES_X-PATCHES_X+J+PATCHES_X,2)+WPA/2
				LSEL,R,LOC,X,POSITIONS_PATCHES(I*PATCHES_X-PATCHES_X+J,1)-LPA/2,POSITIONS_PATCHES(I*PATCHES_X-PATCHES_X+J+1,1)+LPA/2
				LSEL,R,LOC,Z,-TPL/2,-TPL/2
				AL,ALL,,
			*ENDIF
		*ENDDO
		*ENDIF
	*ENDDO
*ENDIF

*IF,PATCHES_Y,GT,1,THEN
	*DO,J,1,PATCHES_X
		NUMBER_PATCH = J
		*IF,PATCHES_Y,GT,1,THEN
		*DO,I,1,PATCHES_Y-1
			ALLSEL,ALL
			LSEL,S,LOC,Y,POSITIONS_PATCHES(NUMBER_PATCH,2)-WPA/2,POSITIONS_PATCHES(NUMBER_PATCH+PATCHES_X,2)+WPA/2
			LSEL,R,LOC,X,POSITIONS_PATCHES(NUMBER_PATCH,1)-LPA/2,POSITIONS_PATCHES(NUMBER_PATCH+PATCHES_X,1)+LPA/2
			LSEL,R,LOC,Z,-TPL/2,-TPL/2
			AL,ALL,,
			
			*IF,J,EQ,PATCHES_X,THEN
				ALLSEL,ALL
				LSEL,S,LOC,Y,POSITIONS_PATCHES(NUMBER_PATCH,2)-WPA/2,POSITIONS_PATCHES(NUMBER_PATCH+PATCHES_X,2)+WPA/2
				LSEL,R,LOC,X,POSITIONS_PATCHES(NUMBER_PATCH+PATCHES_X,1)-LPA/2,-LPL/2
				LSEL,R,LOC,Z,-TPL/2,-TPL/2
				AL,ALL,,
			*ENDIF
			*IF,J,EQ,1,THEN
				ALLSEL,ALL
				LSEL,S,LOC,Y,POSITIONS_PATCHES(NUMBER_PATCH,2)-WPA/2,POSITIONS_PATCHES(NUMBER_PATCH+PATCHES_X,2)+WPA/2
				LSEL,R,LOC,X,POSITIONS_PATCHES(NUMBER_PATCH,1)+LPA/2,LPL/2
				LSEL,R,LOC,Z,-TPL/2,-TPL/2
				AL,ALL,,	
			*ENDIF
			
			NUMBER_PATCH = NUMBER_PATCH+PATCHES_X
		*ENDDO
		*ENDIF
	*ENDDO
*ENDIF

! Areas between the boundary plate and patches
*DO,I,1,PATCHES_Y
	ALLSEL,ALL
	LSEL,S,LOC,Y,POSITIONS_PATCHES(I*PATCHES_X-(PATCHES_X-1),2)-WPA/2,POSITIONS_PATCHES(I*PATCHES_X-(PATCHES_X-1),2)+WPA/2
	LSEL,R,LOC,X,POSITIONS_PATCHES(I*PATCHES_X-(PATCHES_X-1),1)+LPA/2,LPL/2
	LSEL,R,LOC,Z,-TPL/2,-TPL/2
	AL,ALL,,
	ALLSEL,ALL
	LSEL,S,LOC,Y,POSITIONS_PATCHES(I*PATCHES_X,2)-WPA/2,POSITIONS_PATCHES(I*PATCHES_X,2)+WPA/2
	LSEL,R,LOC,X,POSITIONS_PATCHES(I*PATCHES_X,1)-LPA/2,-LPL/2
	LSEL,R,LOC,Z,-TPL/2,-TPL/2
	AL,ALL,,
*ENDDO
*DO,I,1,PATCHES_X
	ALLSEL,ALL
	LSEL,S,LOC,Y,POSITIONS_PATCHES(I,2)+WPA/2,WPL/2
	LSEL,R,LOC,X,POSITIONS_PATCHES(I,1)-LPA/2,POSITIONS_PATCHES(I,1)+LPA/2
	LSEL,R,LOC,Z,-TPL/2,-TPL/2
	AL,ALL,,
	ALLSEL,ALL
	LSEL,S,LOC,Y,POSITIONS_PATCHES(QNTD_PATCHES-PATCHES_X+I,2)-WPA/2,-WPL/2
	LSEL,R,LOC,X,POSITIONS_PATCHES(QNTD_PATCHES-PATCHES_X+I,1)-LPA/2,POSITIONS_PATCHES(QNTD_PATCHES-PATCHES_X+I,1)+LPA/2
	LSEL,R,LOC,Z,-TPL/2,-TPL/2
	AL,ALL,,
*ENDDO
!***_	
!****_ 3.3.4 Volumns [OK]
		! Patches
		! Volumn of bottom patches
NUMBER_AREA = 1
*DO,I,1,QNTD_PATCHES
	VEXT,NUMBER_AREA, , ,0,0,-TPA
	NUMBER_AREA = NUMBER_AREA + 1
*ENDDO
		! Volumn of top patches
*DO,I,1,QNTD_PATCHES
	VEXT,NUMBER_AREA, , ,0,0,TPA
	NUMBER_AREA = NUMBER_AREA + 1
*ENDDO
		! Plate
ALLSEL,ALL
ASEL,S,LOC,Z,-TPL/2,-TPL/2
VEXT,ALL, , ,0,0,TPL

!***_
NUMMRG,KP, , , ,LOW
!***_
!****_ 3.4 Mesh [OK]
!
!****_ 3.4.1 Horizontal lines
! Lines near from the wall
ALLSEL,ALL
LSEL,S,LOC,Y,WPL/2,-WPL/2
LSEL,R,LOC,Z,(TPL/2+TPA),-(TPL/2+TPA)
LSEL,R,LOC,X,((POSITIONS_PATCHES(1,1)+LPA/2)+LPL/2)/2,((POSITIONS_PATCHES(1,1)+LPA/2)+LPL/2)/2
LSEL,A,LOC,X,((POSITIONS_PATCHES(PATCHES_X,1)-LPA/2)-LPL/2)/2,((POSITIONS_PATCHES(PATCHES_X,1)-LPA/2)-LPL/2)/2
*IF,MESH_TYPE,EQ,0,THEN
	LESIZE,ALL,,,CORNERDIV
*ELSEIF,MESH_TYPE,EQ,1,THEN
	LESIZE,ALL,LENGTH_MESH,,
*ENDIF
! Lines in the same coordinate of patches
ALLSEL,ALL
LSEL,S,LOC,Y,WPL/2,-WPL/2
LSEL,R,LOC,Z,(TPL/2+TPA),-(TPL/2+TPA)
LSEL,R,LOC,X,POSITIONS_PATCHES(1,1),POSITIONS_PATCHES(1,1)
*IF,PATCHES_X,GT,1,THEN
	*DO,I,2,PATCHES_X
		LSEL,A,LOC,X,POSITIONS_PATCHES(I,1),POSITIONS_PATCHES(I,1)
	*ENDDO
*ENDIF
*IF,MESH_TYPE,EQ,0,THEN
	LESIZE,ALL,,,PATCHDIV
*ELSEIF,MESH_TYPE,EQ,1,THEN
	LESIZE,ALL,LENGTH_MESH,,
*ENDIF
! Lines between patches
ALLSEL,ALL
LSEL,S,LOC,Y,WPL/2,-WPL/2
LSEL,R,LOC,Z,(TPL/2+TPA),-(TPL/2+TPA)
*IF,PATCHES_X,GT,1,THEN
	LSEL,S,LOC,X,(POSITIONS_PATCHES(1,1)+POSITIONS_PATCHES(2,1))/2,(POSITIONS_PATCHES(1,1)+POSITIONS_PATCHES(2,1))/2
	*IF,PATCHES_X,GT,2,THEN
		*DO,I,2,PATCHES_X-1
			LSEL,A,LOC,X,(POSITIONS_PATCHES(I,1)+POSITIONS_PATCHES(I+1,1))/2,(POSITIONS_PATCHES(I,1)+POSITIONS_PATCHES(I+1,1))/2
		*ENDDO
	*ENDIF
	*IF,MESH_TYPE,EQ,0,THEN
		LESIZE,ALL,,,BETWDIV
	*ELSEIF,MESH_TYPE,EQ,1,THEN
		LESIZE,ALL,LENGTH_MESH,,
	*ENDIF
*ENDIF
!***_
!****_ 3.4.2 Vertical lines
! Lines near from the wall
ALLSEL,ALL
LSEL,S,LOC,X,LPL/2,-LPL/2
LSEL,R,LOC,Z,(TPL/2+TPA),-(TPL/2+TPA)
LSEL,R,LOC,Y,((POSITIONS_PATCHES(1,2)+WPA/2)+WPL/2)/2,((POSITIONS_PATCHES(1,2)+WPA/2)+WPL/2)/2
LSEL,A,LOC,Y,((POSITIONS_PATCHES(PATCHES_X*PATCHES_Y-(PATCHES_Y-1),2)-WPA/2)-WPL/2)/2,((POSITIONS_PATCHES(PATCHES_X*PATCHES_Y-(PATCHES_Y-1),2)-WPA/2)-WPL/2)/2
*IF,MESH_TYPE,EQ,0,THEN
	LESIZE,ALL,,,CORNERDIV
*ELSEIF,MESH_TYPE,EQ,1,THEN
	LESIZE,ALL,LENGTH_MESH,,
*ENDIF
! Lines in the same coordinate of patches
ALLSEL,ALL
LSEL,S,LOC,X,LPL/2,-LPL/2
LSEL,R,LOC,Z,(TPL/2+TPA),-(TPL/2+TPA)
LSEL,R,LOC,Y,POSITIONS_PATCHES(1,2),POSITIONS_PATCHES(1,2)
*IF,PATCHES_Y,GT,1,THEN
	*DO,I,2,PATCHES_Y
		LSEL,A,LOC,Y,POSITIONS_PATCHES(I*PATCHES_X,2),POSITIONS_PATCHES(I*PATCHES_X,2)
	*ENDDO
*ENDIF
*IF,MESH_TYPE,EQ,0,THEN
	LESIZE,ALL,,,PATCHDIV
*ELSEIF,MESH_TYPE,EQ,1,THEN
	LESIZE,ALL,LENGTH_MESH,,
*ENDIF
! Lines between patches
ALLSEL,ALL
LSEL,S,LOC,X,LPL/2,-LPL/2
LSEL,R,LOC,Z,(TPL/2+TPA),-(TPL/2+TPA)
*IF,PATCHES_Y,GT,1,THEN
	LSEL,S,LOC,Y,(POSITIONS_PATCHES(1,2)+POSITIONS_PATCHES(PATCHES_X+1,2))/2,(POSITIONS_PATCHES(1,2)+POSITIONS_PATCHES(PATCHES_X+1,2))/2
	*IF,PATCHES_Y,GT,2,THEN
		*DO,I,2,PATCHES_Y-1
			LSEL,A,LOC,Y,(POSITIONS_PATCHES((I+1)*PATCHES_X,2)+POSITIONS_PATCHES(I*PATCHES_X,2))/2,(POSITIONS_PATCHES((I+1)*PATCHES_X,2)+POSITIONS_PATCHES(I*PATCHES_X,2))/2
		*ENDDO
	*ENDIF
	*IF,MESH_TYPE,EQ,0,THEN
		LESIZE,ALL,,,BETWDIV
	*ELSEIF,MESH_TYPE,EQ,1,THEN
		LESIZE,ALL,LENGTH_MESH,,
	*ENDIF
*ENDIF
!***_
!****_ 3.4.3 Thickness lines
!
ALLSEL,ALL
LSEL,S,LOC,X,LPL/2,-LPL/2
LSEL,R,LOC,Y,WPL/2,-WPL/2
LSEL,R,LOC,Z,0,0
LSEL,A,LOC,Z,TPL/2+TPA/2
LSEL,A,LOC,Z,-TPL/2-TPA/2
LESIZE,ALL,,,TDIV
ALLSEL,ALL
!***_
!***_
!****_ 3.5 Discretize the model [OK]
! Plate [OK]
ALLSEL,ALL
TYPE,1
MAT,1
MSHKEY,1
VSEL,S,LOC,Z,0,0
VMESH,ALL

! Patches [OK]
ALLSEL,ALL
TYPE,2
MAT,2
MSHKEY,1
VSEL,S,LOC,Z,TPL/2+TPA/2,TPL/2+TPA/2
VSEL,A,LOC,Z,-(TPL/2+TPA/2),-(TPL/2+TPA/2)
VMESH,ALL

NUMMRG,NODE, , , ,LOW
NUMMRG,ELEMENTS, , , ,LOW
!***_

!****_ 3.6 Define equipotential surface in patches [OK]
!
*DIM,PATCH_NODE_POTENTIAL,ARRAY,2*QNTD_PATCHES,2,,,,				! The variable has 2 columns: Node[Out] | Node[In]
!										! This node, is the node that represent the inner
!										! and the outer surface of the patch
! Top patches
*DO,I,1,QNTD_PATCHES
	ALLSEL,ALL
	ESEL,S,TYPE,,2								! Needs to do this because also have the element 3
	NSLE,R,ALL								! Get the nodes
	NSEL,R,LOC,X,POSITIONS_PATCHES(I,1)-LPA/2,POSITIONS_PATCHES(I,1)+LPA/2
	NSEL,R,LOC,Y,POSITIONS_PATCHES(I,2)-WPA/2,POSITIONS_PATCHES(I,2)+WPA/2
	NSEL,R,LOC,Z,TPL/2+TPA,TPL/2+TPA					! Outer surface
	CP,NEXT,VOLT,ALL							! Coupling the nodes
	*GET,NNODE,NODE,,NUM,MIN						! Node that represents the surface
	PATCH_NODE_POTENTIAL(I,1)	= NNODE
	
	ALLSEL,ALL
	ESEL,S,TYPE,,2								! Needs to do this because also have the element 3
	NSLE,R,ALL								! Get the nodes
	NSEL,R,LOC,X,POSITIONS_PATCHES(I,1)-LPA/2,POSITIONS_PATCHES(I,1)+LPA/2
	NSEL,R,LOC,Y,POSITIONS_PATCHES(I,2)-WPA/2,POSITIONS_PATCHES(I,2)+WPA/2
	NSEL,R,LOC,Z,TPL/2,TPL/2						! Inner surface
	CP,NEXT,VOLT,ALL							! Coupling the nodes
	*GET,NNODE,NODE,,NUM,MIN						! Node that represents the surface
	PATCH_NODE_POTENTIAL(I,2)	= NNODE
*ENDDO
! Bottom patches
*DO,I,1,QNTD_PATCHES
	ALLSEL,ALL
	ESEL,S,TYPE,,2								! Needs to do this because also have the element 3
	NSLE,R,ALL								! Get the nodes
	NSEL,R,LOC,X,POSITIONS_PATCHES(I,1)-LPA/2,POSITIONS_PATCHES(I,1)+LPA/2
	NSEL,R,LOC,Y,POSITIONS_PATCHES(I,2)-WPA/2,POSITIONS_PATCHES(I,2)+WPA/2
	NSEL,R,LOC,Z,-TPL/2-TPA,-TPL/2-TPA					! Outer surface
	CP,NEXT,VOLT,ALL							! Coupling the nodes
	*GET,NNODE,NODE,,NUM,MIN						! Node that represents the surface
	PATCH_NODE_POTENTIAL(QNTD_PATCHES+I,1)	= NNODE
	
	ALLSEL,ALL
	ESEL,S,TYPE,,2								! Needs to do this because also have the element 3
	NSLE,R,ALL								! Get the nodes
	NSEL,R,LOC,X,POSITIONS_PATCHES(I,1)-LPA/2,POSITIONS_PATCHES(I,1)+LPA/2
	NSEL,R,LOC,Y,POSITIONS_PATCHES(I,2)-WPA/2,POSITIONS_PATCHES(I,2)+WPA/2
	NSEL,R,LOC,Z,-TPL/2,-TPL/2						! Inner surface
	CP,NEXT,VOLT,ALL							! Coupling the nodes
	*GET,NNODE,NODE,,NUM,MIN						! Node that represents the surface
	PATCH_NODE_POTENTIAL(QNTD_PATCHES+I,2)	= NNODE
*ENDDO
! According to the literature, the outer surfarces of z-symmetric patches must to be equal
*DO,I,1,QNTD_PATCHES
	ALLSEL,ALL
	CP,NEXT,VOLT,PATCH_NODE_POTENTIAL(I,1),PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,1)	
*ENDDO
ALLSEL,ALL
!***_
!****_ 3.7 Eletrical boundary conditions [OK]
! Ground nodes
ALLSEL,ALL
*DO,I,1,2*QNTD_PATCHES
	D,PATCH_NODE_POTENTIAL(I,2),VOLT,0					! Restriction on the voltage degree of freedom
*ENDDO
!***_
!****_ 3.8 Mechanical boundary conditions [OK]
! Simply supported
ALLSEL,ALL
NSEL,S,LOC,Z,-TPL/2
NSEL,R,LOC,X,-LPL/2
D,ALL,UZ,0

ALLSEL,ALL
NSEL,S,LOC,Z,-TPL/2
NSEL,R,LOC,X,LPL/2
D,ALL,UZ,0

ALLSEL,ALL
NSEL,S,LOC,Z,-TPL/2
NSEL,R,LOC,Y,-WPL/2
D,ALL,UZ,0

ALLSEL,ALL
NSEL,S,LOC,Z,-TPL/2
NSEL,R,LOC,Y,WPL/2
D,ALL,UZ,0

! Fully restrain a Corner
ALLSEL,ALL
NSEL,S,LOC,X,-LPL/2
NSEL,R,LOC,Y,WPL/2
NSEL,R,LOC,Z,-TPL/2
D,ALL,UX,0
D,ALL,UY,0

! Restrain another corner for the problem to be fully constrained
ALLSEL,ALL
NSEL,S,LOC,X,LPL/2
NSEL,R,LOC,Y,WPL/2
NSEL,R,LOC,Z,-TPL/2
D,ALL,UX,0

ALLSEL,ALL
NSEL,S,LOC,X,LPL/2
NSEL,R,LOC,Y,-WPL/2
NSEL,R,LOC,Z,-TPL/2
D,ALL,UY,0

ALLSEL,ALL
!***_
!****_ 3.9 Load [OK]
ALLSEL,ALL
NSEL,S,LOC,X,LOC_F_X-LENGTH_MESH/2,LOC_F_X+LENGTH_MESH/2
NSEL,R,LOC,Y,LOC_F_Y-LENGTH_MESH/2,LOC_F_Y+LENGTH_MESH/2
! LOC_F_Z depends on if the force is on the top of the plate or of the patch
LOC_F_Z		= TPL/2
*DO,I,1,QNTD_PATCHES
	*IF,LOC_F_X,LE,POSITIONS_PATCHES(I,1)+LPA/2,AND,LOC_F_X,GE,POSITIONS_PATCHES(I,1)-LPA/2,THEN
		*IF,LOC_F_Y,LE,POSITIONS_PATCHES(I,2)+WPA/2,AND,LOC_F_Y,GE,POSITIONS_PATCHES(I,2)-WPA/2,THEN
			LOC_F_Z		= TPL/2 + TPA
		*ENDIF
	*ENDIF
*ENDDO
NSEL,R,LOC,Z,LOC_F_Z
*GET,nodeForce,NODE,,NUM,MIN
F,nodeForce,FZ,F_VALUE

ALLSEL,ALL
!***_
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                    4. PRE PROCESSING - Modal [Open Circuit]    _****!
!			   Status: OK				           !
!--------------------------------------------------------------------------!
! Don't need to do nothing, because is just open 
CPMERGE,VOLT
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                    5. SOLVER         - Modal [Open Circuit]    _****!
!			   Status: OK				           !
!--------------------------------------------------------------------------!
*IF,SOLUTION_TYPE,EQ,0,OR,SOLUTION_TYPE,EQ,2,THEN
/SOLU
ANTYPE,MODAL									! Define the type of analysis [Modal]
MODOPT,LANB,QNTD_MODES,0,500, ,OFF   						! Define the quantities of modes to analyse
EQSLV,SPAR									! Solution method
MXPAND,QNTD_MODES, , ,1
LUMPM,0 									! Lumped matrix
PSTRES,0									! PreStress 
ALLSEL,ALL
SOLVE
*ENDIF
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                    6. POS PROCESSING - Modal [Open Circuit]    _****!
!			   Status: OK				           !
!--------------------------------------------------------------------------! 
*IF,SOLUTION_TYPE,EQ,0,OR,SOLUTION_TYPE,EQ,2,THEN
! Modal results
/POST1										! General PostProc
SET,LIST									! List the modal frequency

*DIM,FREQ_MODE_OPEN,ARRAY,QNTD_MODES,1, , , ,
*DIM,VR_PATCH,ARRAY,QNTD_PATCHES,QNTD_MODES, , , ,				! This vector has the modal voltage present in each patch

*DO,I,1,QNTD_MODES								! Get the frequency of each mode
	*GET,FREQ_MODE_OPEN(I,1),MODE,I,FREQ
*ENDDO
*DO,J,1,QNTD_MODES								! Get the modal charge or the modal voltage
	SET,,,,,,,J
	*DO,I,1,QNTD_PATCHES					
	! Obtain modal voltage
		*GET,VR_PATCH(I,J),NODE,PATCH_NODE_POTENTIAL(I,1),VOLT
	*ENDDO
*ENDDO
*ENDIF
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                    7. PRE PROCESSING - Modal [Short Circuit]    ****!
!			   Status: OK				           !
!--------------------------------------------------------------------------!
*IF,SOLUTION_TYPE,EQ,0,OR,SOLUTION_TYPE,EQ,2,THEN
! Circuit type - [OK]
/PREP7
ALLSEL,ALL
*DO,I,1,QNTD_PATCHES		
	D,PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,1),VOLT,0				! We can restrict just this outer face because the top and the botton patches
										! are couppled
*ENDDO
CPMERGE,VOLT
*ENDIF
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                    8. SOLVER         - Modal [Short Circuit]   _****!
!			   Status: OK				           !
!--------------------------------------------------------------------------!
*IF,SOLUTION_TYPE,EQ,0,OR,SOLUTION_TYPE,EQ,2,THEN
/SOLU
ANTYPE,MODAL									! Define the type of analysis [Modal]
MODOPT,LANB,QNTD_MODES,0,500, ,OFF   						! Define the quantities of modes to analyse
EQSLV,SPAR									! Solution method
MXPAND,QNTD_MODES, , ,1
LUMPM,0 									! Lumped matrix
PSTRES,0									! PreStress 
ALLSEL,ALL
SOLVE
*ENDIF
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                    9. POS PROCESSING - Modal [Short Circuit]   _****!
!			   Status: OK				           !
!--------------------------------------------------------------------------! 
! Modal results
*IF,SOLUTION_TYPE,EQ,0,OR,SOLUTION_TYPE,EQ,2,THEN
/POST1										! General PostProc
SET,LIST									! List the modal frequency

*DIM,FREQ_MODE_SHORT,ARRAY,QNTD_MODES,1, , , ,
*DIM,EMCC,ARRAY,QNTD_MODES,1, , , ,
*DIM,QR_PATCH,ARRAY,QNTD_PATCHES,QNTD_MODES, , , ,				! This vector has the modal charge present in each patch

*DO,I,1,QNTD_MODES								! Get the frequency of each mode
	*GET,FREQ_MODE_SHORT(I,1),MODE,I,FREQ
*ENDDO
*DO,I,1,QNTD_MODES								! Get the EMCC of each mode
	EMCC(I,1) = 100*(FREQ_MODE_OPEN(I,1)*FREQ_MODE_OPEN(I,1)-FREQ_MODE_SHORT(I,1)*FREQ_MODE_SHORT(I,1))/(FREQ_MODE_SHORT(I,1)*FREQ_MODE_SHORT(I,1))
*ENDDO
*DO,J,1,QNTD_MODES								! Get the modal charge or the modal voltage
	SET,,,,,,,J
	*DO,I,1,QNTD_PATCHES
	! Obtain modal charge
		*GET,QR_PATCH(I,J),NODE,PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,1),RF,CHRG
	*ENDDO
*ENDDO
*CFOPEN,Output_EMCC,txt 							! Open file to store EMCC results 
*VWRITE,EMCC(1)
(F8.5)
*CFCLOS
*ENDIF
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                   10. PRE PROCESSING - Harmonic		       ****!
!			   Status: In progress Single Shunt	           !
!--------------------------------------------------------------------------!
*IF,SOLUTION_TYPE,EQ,1,OR,SOLUTION_TYPE,EQ,2,THEN
/PREP7
*IF,SHUNT_TYPE,EQ,0,THEN								
! Multiple Shunt - [OK]
	! Circuit type - [OK]
	*DO,I,1,QNTD_PATCHES
		ALLSEL,ALL
		*IF,SOLUTION_TYPE,EQ,2,THEN
			DDELE,PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,1),VOLT			! Remove Short Circuit Restriction
		*ENDIF
		
		CIRCUIT		= CIRCUITS(I,1)
		
		*IF,CIRCUIT,LT,1.5,AND,CIRCUIT,GT,0.5,THEN					! Short-Circuit		
			D,PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,1),VOLT,0				! We can restrict just this outer face because the top and the botton patches
												! are couppled
												
		*ELSEIF,CIRCUIT,LT,2.5,AND,CIRCUIT,GT,1.5,THEN					! Open-Circuit
												! Dont have to do nothing, is just open
		*ELSEIF,CIRCUIT,LT,3.5,AND,CIRCUIT,GT,2.5,THEN					! Circuit [with resistence]
			! Resistances
			Type,3
			real,I
			e,PATCH_NODE_POTENTIAL(I,1),PATCH_NODE_POTENTIAL(I,2)
			
		*ELSEIF,CIRCUIT,LT,4.5,AND,CIRCUIT,GT,3.5,THEN					! Circuit in serie [with resistence and inductance]
			! Auxiliary node
			N,,POSITIONS_PATCHES(I,1),POSITIONS_PATCHES(I,2),TPL/2+TPA*1.5		! The position can be anywhere
			*GET,AUXILIARY_NODE,NODE,,NUM,MAX
	!		D,AUXILIARY_NODE,UX,mnodeT,1,0.0,0.0,UY,UZ				! I dont know why I need this
			! Resistances
			Type,3
			real,I
			e,PATCH_NODE_POTENTIAL(I,1),AUXILIARY_NODE
			! Inductances
			Type,4
			real,I+QNTD_PATCHES
			e,PATCH_NODE_POTENTIAL(I,2),AUXILIARY_NODE
			
		*ELSEIF,CIRCUIT,LT,5.5,AND,CIRCUIT,GT,4.5,THEN					! Circuit in parallel [with resistence and inductance]
			! Resistances
			Type,3
			real,I
			e,PATCH_NODE_POTENTIAL(I,1),PATCH_NODE_POTENTIAL(I,2)
			! Inductances
			Type,4
			real,I+QNTD_PATCHES
			e,PATCH_NODE_POTENTIAL(I,1),PATCH_NODE_POTENTIAL(I,2)	
		*ENDIF
	*ENDDO
!
!
! Single Shunt - [In progress] O CPMERGE tÃ¡ dando algo errado, nÃ£o sei porque
*ELSEIF,SHUNT_TYPE,EQ,1,AND,SOLUTION_TYPE,EQ,2,THEN
	
	! Remove restrictions
	*DO,I,1,QNTD_PATCHES
		ALLSEL,ALL
		DDELE,PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,1),VOLT				! Remove Short Circuit Restriction
		DDELE,PATCH_NODE_POTENTIAL(I,2),VOLT						! Remove Ground
	*ENDDO

	ALLSEL,ALL
	! New equipotential surfaces - [OK]
	*DO,I,1,QNTD_PATCHES
		*IF,QR_PATCH(I,MODE_EXCITED),LT,0,THEN
		*IF,I,EQ,1,THEN
			NSEL,S,NODE,,PATCH_NODE_POTENTIAL(I,2)					! Inner Surface of the top patch
		*ELSE
			NSEL,A,NODE,,PATCH_NODE_POTENTIAL(I,2)
		*ENDIF
		*ELSE
		*IF,I,EQ,1,THEN
			NSEL,S,NODE,,PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,1)			! Coupple of outter interfaces
		*ELSE
			NSEL,A,NODE,,PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,1)
		*ENDIF
		*ENDIF
	*ENDDO
	CP,NEXT,VOLT,ALL							! Coupling the nodes
	*GET,NODE_EQUIPOTENTIAL_NEGATIVE_SINGLESHUNT,NODE,,NUM,MIN		! Node that represents the equipotential surfaces

	ALLSEL,ALL
	! New equipotential surfaces - [OK]
	*DO,I,1,QNTD_PATCHES
		*IF,QR_PATCH(I,MODE_EXCITED),GT,0,THEN
		*IF,I,EQ,1,THEN
			NSEL,S,NODE,,PATCH_NODE_POTENTIAL(I,2)					! Inner Surface of the top patch
		*ELSE
			NSEL,A,NODE,,PATCH_NODE_POTENTIAL(I,2)
		*ENDIF
		*ELSE
		*IF,I,EQ,1,THEN
			NSEL,S,NODE,,PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,1)			! Coupple of outter interfaces
		*ELSE
			NSEL,A,NODE,,PATCH_NODE_POTENTIAL(I+QNTD_PATCHES,1)
		*ENDIF
		*ENDIF
	*ENDDO
	CP,NEXT,VOLT,ALL							! Coupling the nodes
	*GET,NODE_EQUIPOTENTIAL_POSITIVE_SINGLESHUNT,NODE,,NUM,MIN		! Node that represents the equipotential surfaces

	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	CPMERGE,VOLT								! Problema estÃ¡ aqui
	!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	! Circuit type - [OK]
	CIRCUIT		= CIRCUITS(1,1)
	ALLSEL,ALL
	*IF,CIRCUIT,LT,1.5,AND,CIRCUIT,GT,0.5,THEN				! Short-Circuit		
		D,NODE_EQUIPOTENTIAL_POSITIVE_SINGLESHUNT,VOLT,0			
	*ELSEIF,CIRCUIT,LT,2.5,AND,CIRCUIT,GT,1.5,THEN						! Open-Circuit
												! Dont have to do nothing, is just open
	*ELSEIF,CIRCUIT,LT,3.5,AND,CIRCUIT,GT,2.5,THEN						! Circuit [with resistence]
		! Resistances
		Type,3
		real,1
		e,NODE_EQUIPOTENTIAL_POSITIVE_SINGLESHUNT,NODE_EQUIPOTENTIAL_NEGATIVE_SINGLESHUNT
			
	*ELSEIF,CIRCUIT,LT,4.5,AND,CIRCUIT,GT,3.5,THEN						! Circuit in serie [with resistence and inductance]
		! Auxiliary node
		N,,0,0,TPL/2+TPA*1.5								! The position can be anywhere
		*GET,AUXILIARY_NODE,NODE,,NUM,MAX
	!	D,AUXILIARY_NODE,UX,mnodeT,1,0.0,0.0,UY,UZ					! I dont know why I need this
		! Resistances
		Type,3
		real,1
		e,NODE_EQUIPOTENTIAL_POSITIVE_SINGLESHUNT,AUXILIARY_NODE
		! Inductances
		Type,4
		real,2
		e,NODE_EQUIPOTENTIAL_NEGATIVE_SINGLESHUNT,AUXILIARY_NODE
			
	*ELSEIF,CIRCUIT,LT,5.5,AND,CIRCUIT,GT,4.5,THEN						! Circuit in parallel [with resistence and inductance]
		! Resistances
		Type,3
		real,1
		e,NODE_EQUIPOTENTIAL_POSITIVE_SINGLESHUNT,NODE_EQUIPOTENTIAL_NEGATIVE_SINGLESHUNT
		! Inductances
		Type,4
		real,2
		e,NODE_EQUIPOTENTIAL_POSITIVE_SINGLESHUNT,NODE_EQUIPOTENTIAL_NEGATIVE_SINGLESHUNT	
	*ENDIF
	
	D,NODE_EQUIPOTENTIAL_NEGATIVE_SINGLESHUNT,VOLT,0			! Ground
*ENDIF
*ENDIF
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                   11. SOLVER         - Harmonic                 ****!
!			   Status: OK				           !
!--------------------------------------------------------------------------!
*IF,SOLUTION_TYPE,EQ,1,OR,SOLUTION_TYPE,EQ,2,THEN
NPTOS		= 52
/SOLU
ANTYPE,HARMIC									! Define the type of analysis [Harmonic]
HROPT,FULL									! Method FULL for the harmonic analysis
HROUT,ON									! Can be either ON(complex) or OFF(mag,phase) and does not 
										! influence the VGET command in POST26 
LUMPM,0 									! Lumped matrix
PSTRES,0									! PreStress 
EQSLV,,1e-8,
HARFRQ,0.9*FREQ_MODE_EXCITED,1.1*FREQ_MODE_EXCITED
NSUBST,NPTOS,							! Quantities of substeps
KBC,1 								! 0 - Ramp, 1 - Step
SOlVE
*ENDIF
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
!****_                   12. POS PROCESSING - Harmonic                _****!
!			   Status: OK			      		   !
!--------------------------------------------------------------------------! 
! Harmonic results
*IF,SOLUTION_TYPE,EQ,1,OR,SOLUTION_TYPE,EQ,2,THEN
/POST26
*DIM,FRD,ARRAY,NPTOS,2
*DIM,AMP,ARRAY,NPTOS,1
*DIM,DATA_FREQUENCY,ARRAY,NPTOS+1,1

DATA_FREQUENCY(1,1)	= FREQ_MODE_EXCITED					! Get frequency excited
		
NSOL,2,nodeForce,U,Z,
VGET,DATA_FREQUENCY(2,1),1,,0
VGET,FRD(1,1),2,,0 								! Real part
VGET,FRD(1,2),2,,1 								! Imaginary part

*DO,i,1,NPTOS,1
	AMP(i)=sqrt(frd(i,1)**2+frd(i,2)**2) 				! Amplitude
*ENDDO

*CFOPEN,Output_DataAmplitude,txt 						! Open file to store results 
*VWRITE,AMP(1)
(F15.6)
*CFCLOS
*CFOPEN,Output_DataFrequency,txt 						! Open file to store results 
*VWRITE,DATA_FREQUENCY(1)
(F12.4)
*CFCLOS
*ENDIF
!***_ ---------------------------------------------------------------------!
!--------------------------------------------------------------------------!
FINISH
